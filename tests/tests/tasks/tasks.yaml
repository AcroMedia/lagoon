- name: "{{ testname }} - init git, add files, commit, git push"
  hosts: localhost
  serial: 1
  vars:
    git_files: "tasks/"
  tasks:
  - include: ../../tasks/git-init.yaml
  - include: ../../tasks/git-add-commit-push.yaml

- name: "{{ testname }} - api deployEnvironmentBranch on {{ project }}, which should deploy the first commit"
  hosts: localhost
  serial: 1
  vars:
    branch: "{{ branch }}"
    project: "{{ project }}"
  tasks:
  - include: ../../tasks/api/deploy-no-sha.yaml

# - name: "{{ testname }} - check if {{ project }} is deployed with searching for 'TO BE REPLACED' which is added by hand"
#   hosts: localhost
#   serial: 1
#   vars:
#     url: "{{ check_url }}"
#     expected_content: "TO BE REPLACED"
#   tasks:
#   - include: ../../checks/check-url-content.yaml

- name: "{{ testname }} - POST api Add task to {{ project }} via {{ graphql_url }}"
  hosts: localhost
  tasks:
    - include: ../../tasks/api/refresh-token.yaml
    - include: ./create-and-register-task.yaml
      vars:
        openshift_project_name: openshift_project_name
    # - name: "{{ testname }} - POST api taskById with ID {{ apiresponse.json.data.switchActiveStandby.id }} for migration status to {{ graphql_url }}"
    #   uri:
    #     url: "{{ graphql_url }}"
    #     method: POST
    #     headers:
    #       Authorization: "Bearer {{ token }}"
    #     body_format: json
    #     body: '{ "query": "query($id: Int!) {taskById(id: $id){status}}", "variables": {"id":{{ apiresponse.json.data.switchActiveStandby.id }}}}'
    #   register: taskresult
    #   until: taskresult.json.data is defined and (taskresult.json.data.taskById.status == "succeeded" or taskresult.json.data.taskById.status == "failed")
    #   retries: 30
    #   delay: 10
    # - name: "{{ testname }} - fail if task fails"
    #   fail:
    #     msg: "The route migration failed for some reason"
    #   when: taskresult.json.data.taskById.status == "failed"
    # - name: "{{ testname }} - POST api projectByName with project {{ project }} for final migration status to {{ graphql_url }}"
    #   uri:
    #     url: "{{ graphql_url }}"
    #     method: POST
    #     headers:
    #       Authorization: "Bearer {{ token }}"
    #     body_format: json
    #     body: '{ "query": "query($projectName: String!) {projectByName(name:$projectName){productionEnvironment,standbyProductionEnvironment}}", "variables": {"projectName":"{{ project }}"}}'
    #   register: switchresult
    #   until: switchresult.json.data.projectByName.productionEnvironment == standby_branch or switchresult.json.data.projectByName.standbyProductionEnvironment == branch
    #   retries: 30
    #   delay: 10

- name: "{{ testname }} - check if {{ project }} is deployed with searching for 'REPLACED BY TASK' which is added by the task"
  hosts: localhost
  serial: 1
  vars:
    url: "{{ check_url }}"
    expected_content: "REPLACED BY TASK"
  tasks:
  - include: ../../checks/check-url-content.yaml


- name: "{{ testname }} - api deleteEnvironment on {{ project }}, which should remove all resources"
  hosts: localhost
  serial: 1
  vars:
    project: "{{ project }}"
    branch: "{{ branch }}"
  tasks:
  - include: ../../tasks/api/remove.yaml

- name: "{{ testname }} - check if site for {{ project }} does not exist anymore"
  hosts: localhost
  serial: 1
  vars:
    url: "{{ check_url }}"
    expected_returncode: "{{ del_status_code }}"
  tasks:
  - include: ../../checks/check-url-returncode.yaml
